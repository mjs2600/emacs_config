My Emacs Configuration File

* Utilities

  These are just some basic utilites to get emacs setup enough to configure.
** Packages
   Setup package and pallet. Install Cask and run =cask install=
   before you start emacs.

   #+begin_src emacs-lisp
     (add-to-list 'load-path "~/.emacs.d/elisp/")
     (require 'package)
     (add-to-list 'package-archives
                  '("melpa" . "http://melpa.milkbox.net/packages/") t)
     (package-refresh-contents)
     (require 'cask "~/.cask/cask.el")
     (cask-initialize)
     (require 'pallet)
   #+end_src

* Personal Information

  #+begin_src emacs-lisp
    (setq user-full-name "Michael Simpson")
    (setq user-mail-address "mjs2600@gmail.com")
    (setq auth-sources '("~/.authinfo.gpg"))
    (setq password-file "~/.passwords.gpg")
    (and (file-exists-p password-file) (load-file password-file))
  #+end_src

* Social

  This section is for social settings.
** RSS
   #+begin_src emacs-lisp
     (setq elfeed-feeds
           '("http://feeds.boingboing.net/boingboing/iBag"
             ;"http://www.stallman.org/rss/rss.xml"
             "http://xkcd.com/rss.xml"
             "http://feeds.feedburner.com/Lessig?format=xmlford.edu/lessig/blog/index.rdf"
             "https://www.eff.org/rss/updates.xml"
             "http://planet.emacsen.org/atom.xml"
             "http://blog.fogus.me/tag/readevalprintlove/feed/"))
   #+end_src

** Jabber
   IM settings for gmail
   #+begin_src emacs-lisp
     ;(require 'jabber)
     
     (setq jabber-account-list
           '(("mjs2600@gmail.com" 
              (:network-server . "talk.google.com")
              (:connection-type . ssl))
             ("mike.simpson@scimedsolutions.com" 
              (:network-server . "talk.google.com")
              (:connection-type . ssl))))
     
     (setq jabber-auto-reconnect nil)
     (setq jabber-vcard-avatars-retrieve nil)
     (setq jabber-mode-line-mode t)
     (setq jabber-show-offline-contacts nil)
   #+end_src

** ERC

** Twitter
   #+begin_src emacs-lisp
     (require 'twittering-mode)
   #+end_src

* Media

  This section is for media settings.
** Pandora
   #+begin_src emacs-lisp
     (setq pianobar-username "xodis2600@gmail.com")
     (load-library "pianobar")
     (require 'pianobar)
   #+end_src
   
** EMMS

   #+begin_src emacs-lisp
     (require 'emms-setup)
     (emms-standard)
     (emms-default-players)

     ;;; Initialize this if it isn't defined.
     (defvar dired-guess-shell-alist-user nil)
     (add-to-list 'dired-guess-shell-alist-user
                  (list "\\.\\(flac\\|mp3\\|ogg\\|wav\\)\\'"
                        '(if (y-or-n-p "Add to EMMS playlist?")
                             (progn (emms-add-file (dired-get-filename))
                                    (emms)
                                    (keyboard-quit))
                           "mplayer")))
   #+end_src

* Games
   #+begin_src emacs-lisp
     (require 'gnugo nil 'no-error)
   #+end_src

* Style

  This section is for things like font size and color theme settings.

  #+begin_src emacs-lisp
    (load-theme 'cyberpunk t)
    ;;(load-theme 'zenburn t)
    (global-auto-revert-mode t)
    (require 'pretty-mode)
    (global-pretty-mode t)
    (ido-mode t)
    (set-face-attribute 'default nil :height 140)

    (setq tab-width 2)
  #+end_src

* Documentation

   #+begin_src emacs-lisp
     (defun doc-at-point ()
       "An OS agnostic external documentation lookup function."
       (interactive)
       (if (eq system-type 'darwin)
           (dash-at-point)
         (zeal-at-point)))
   #+end_src

* Helm
  #+begin_src emacs-lisp
    (helm-mode 1)
    (defun my-helm ()
      "Preconfigured `helm' lightweight version \(buffer -> recentf\)."
      (interactive)
      (require 'helm-files)
      (let ((helm-ff-transformer-show-only-basename nil))
        (helm-other-buffer '(helm-source-buffers-list
                             helm-source-recentf
                             helm-source-buffer-not-found)
                           "*Helm*")))
  #+end_src

* AutoComplete

  Autocompletion, because I don't really want to type entire words.
  #+begin_src emacs-lisp
    (require 'auto-complete)
    (add-to-list 'ac-dictionary-directories "~/elisp/ac-dict/"
                 "~/.emacs.d/elpa/auto-complete-20120330.1836/dict/")
    (require 'auto-complete-config)
    (ac-config-default)
    (auto-complete-mode t)
    (global-auto-complete-mode t)

    (icomplete-mode 0)
    (ido-ubiquitous 1)
  #+end_src

* Haskell
  #+begin_src emacs-lisp
    (add-hook 'haskell-mode-hook 'turn-on-haskell-indentation)
    (add-hook 'haskell-mode-hook 'haskell-flymake-init)
    (add-hook 'haskell-mode-hook 'flymake-hlint-load)
    (add-hook 'haskell-mode-hook 'ghci-completion-mode)
    (add-hook 'haskell-mode-hook 'flymake-haskell-multi-load)
    
    (add-hook 'inferior-haskell-mode-hook 'ghci-completion-mode)
  #+end_src

* JavaScript

** CoffeeScript
  #+begin_src emacs-lisp
    (setq coffee-tab-width 2)
  #+end_src

* Ruby

  #+begin_src emacs-lisp
    (require 'rvm)
    (require 'rsense)
    (require 'inf-ruby)
    (rvm-use-default)
    (rvm-autodetect-ruby)
    (add-hook 'ruby-mode-hook 'rubocop-mode)
    (add-hook 'ruby-mode-hook (lambda () (add-hook
                                          'after-save-hook
                                          'rubocop-check-current-file
                                          nil
                                          'local)))
    (add-hook 'ruby-mode-hook 'robe-mode)
    (push 'ac-source-robe ac-sources)
    (add-hook 'ruby-mode-hook
              (lambda () (rvm-activate-corresponding-ruby)))
    (autoload 'inf-ruby "inf-ruby" "Run an inferior Ruby process" t)
    (add-hook 'ruby-mode-hook 'auto-complete-mode)
    ;; Stupid Fixes
    (setq last-command-char last-command-event)
    ;;(setq inf-ruby-keys inf-ruby-setup-keybindings)
    
    (setq scss-compile-at-save nil)
  #+end_src

** Rails
  #+begin_src emacs-lisp
    (require 'mmm-auto)
    (require 'rinari)
    (rinari-launch)
    
    (require 'rhtml-mode)
    (add-hook 'rhtml-mode-hook
              (lambda () (rinari-launch)))
    (add-to-list 'auto-mode-alist '("\\.erb$" . rhtml-mode))
    (add-hook 'rinari-minor-mode-hook
              (lambda () (setq dash-at-point-docset "rails")))
  #+end_src

* Lisp

There's some common lisp stuff in here, but this section is mostly
for Clojure, ELisp, and Racket now.
** Default Lisp
   Prelude uses Clozure as the default implementation, so I'll use that until it
   gives me problems.
  #+begin_src emacs-lisp
    (setq inferior-lisp-program "ccl")
  #+end_src

** Slime
  #+begin_src emacs-lisp
    (load (expand-file-name "~/quicklisp/slime-helper.el"))
    (slime-setup '(slime-fancy))
    (setq slime-use-autodoc-mode nil)
  #+end_src
** Paredit
  #+begin_src emacs-lisp

    (require 'paredit)
    (autoload 'paredit-mode "paredit"
      "Minor mode for pseudo-structurally editing Lisp code." t)
    (add-hook 'emacs-lisp-mode-hook       (lambda () (paredit-mode +1)))
    (add-hook 'lisp-mode-hook             (lambda () (paredit-mode +1)))
    (add-hook 'lisp-interaction-mode-hook (lambda () (paredit-mode +1)))
    (add-hook 'scheme-mode-hook           (lambda () (paredit-mode +1)))
    (add-hook 'clojure-mode-hook          (lambda () (paredit-mode +1)))
    (add-hook 'slime-mode-hook            (lambda () (paredit-mode +1)))
    (add-hook 'ielm-mode-hook             (lambda () (paredit-mode +1)))
    (add-hook 'cider-mode-hook             (lambda () (paredit-mode +1)))
    (add-hook 'cider-repl-mode-hook             (lambda () (paredit-mode +1)))

    (provide 'lisp-config)

  #+end_src

** Clojure
  #+begin_src emacs-lisp
    (require 'cider)
    (add-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode)
    (setq nrepl-buffer-name-show-port t)
    (add-hook 'cider-repl-mode-hook 'rainbow-delimiters-mode)
  #+end_src

* eShell
  
  eShell is amazing, but these settings make it better.
  #+begin_src emacs-lisp

    (setq eshell-cmpl-ignore-case t)
    (defadvice ansi-term (after advise-ansi-term-coding-system)
      (set-buffer-process-coding-system 'utf-8-unix 'utf-8-unix))
    (ad-activate 'ansi-term)

  #+end_src

* Projectile

  #+begin_src emacs-lisp
     (projectile-global-mode t)
  #+end_src

* Key Bindings

    #+begin_src emacs-lisp
      (global-set-key (kbd "C-c f") 'ffip)
      (global-set-key (kbd "C-x C-b") 'ibuffer)
      (global-set-key (kbd "C-c r") 'ielm)
      (global-set-key (kbd "C-c d") 'doc-at-point)
      (global-set-key (kbd "C-c h") 'my-helm)
      (windmove-default-keybindings)
    #+end_src

* Key Chords


  #+begin_src emacs-lisp
    (require 'key-chord)
    
    ;;(iswitchb-mode 1)
    ;;(key-chord-define-global "BB" 'iswitchb-buffer)
    
    (key-chord-define-global "FF" 'find-file)
    (key-chord-define-global "qf" 'projectile-find-file)
    (key-chord-define-global "qb" 'ido-switch-buffer)
    (key-chord-define-global "qh" 'helm-mini)
    
    (key-chord-define-global "jk" 'beginning-of-buffer)
    (key-chord-define-global "jl" 'end-of-buffer)

    (key-chord-mode +1)
  #+end_src
