My Emacs Configuration File

* Utilities

** Package
   Setup package

   #+begin_src emacs-lisp
     (require 'package)
     (add-to-list 'package-archives
                  '("melpa" . "http://melpa.milkbox.net/packages/") t)
     (add-to-list 'load-path "~/elisp/package/")
     (require 'package+)
     (package-refresh-contents)
   #+end_src

** Packages

   This is a list of all of the packages that I use.

   #+begin_src emacs-lisp
     (package-manifest 'auto-complete
                       'ac-nrepl
                       'ag
                       'cyberpunk-theme
                       'ghc
                       'ghci-completion
                       'pretty-mode
                       'rvm
                       'rsense
                       'paredit
                       'findr
                       'geiser
                       'projectile
                       'helm
                       'helm-projectile
                       'inflections
                       'yasnippet
                       'yasnippet-bundle
                       'coffee-mode
                       'mmm-mode
                       'key-chord
                       'rhtml-mode
                       'rinari
                       'starter-kit
                       'starter-kit-bindings
                       'starter-kit-eshell
                       'starter-kit-js
                       'starter-kit-ruby
                       'starter-kit-lisp
                       'twittering-mode
                       'zenburn-theme
                       'robe
                       'rubocop
                       'elixir-mode
                       'elixir-mix
                       'haskell-mode
                       'elfeed)
   #+end_src

* Personal Information

  #+begin_src emacs-lisp
      (setq user-full-name "Michael Simpson")
      (setq user-mail-address "mjs2600@gmail.com")
      (setq auth-sources '("~/.authinfo.gpg"))
  #+end_src

* Social
** RSS
   #+begin_src emacs-lisp
     (setq elfeed-feeds
           '("http://feeds.boingboing.net/boingboing/iBag"
             ;"http://www.stallman.org/rss/rss.xml"
             "http://xkcd.com/rss.xml"
             "http://feeds.feedburner.com/Lessig?format=xmlford.edu/lessig/blog/index.rdf"
             "https://www.eff.org/rss/updates.xml"
             "http://planet.emacsen.org/atom.xml"))
   #+end_src

** Jabber
   IM settings for gmail
   #+begin_src emacs-lisp
     (add-to-list 'load-path "~/elisp/emacs-jabber")
     (require 'jabber-autoloads)
     
     (setq jabber-account-list
           '(("mjs2600@gmail.com" 
              (:network-server . "talk.google.com")
              (:connection-type . ssl))
             ("mike.simpson@scimedsolutions.com" 
              (:network-server . "talk.google.com")
              (:connection-type . ssl))))
     
     (setq jabber-auto-reconnect nil)
     (setq jabber-vcard-avatars-retrieve nil)
     (setq jabber-mode-line-mode t)
     (setq jabber-show-offline-contacts nil)
   #+end_src

** ERC

** Twitter
   #+begin_src emacs-lisp
     (require 'twittering-mode)
   #+end_src
* Style
  This section is for things like font size and color theme settings.
  #+begin_src emacs-lisp
    ;;(load-theme 'cyberpunk t)
    (global-auto-revert-mode t)
    (load-theme 'zenburn t)
    (require 'pretty-mode)
    (global-pretty-mode t)
    (ido-mode t)
    (set-face-attribute 'default nil :height 140)

    (setq tab-width 2)
  #+end_src
* AutoComplete

  #+begin_src emacs-lisp
    (helm-mode 1)
    (require 'auto-complete)
    (add-to-list 'ac-dictionary-directories "~/elisp/ac-dict/"
                 "~/.emacs.d/elpa/auto-complete-20120330.1836/dict/")
    (require 'auto-complete-config)
    (ac-config-default)
    (auto-complete-mode t)
    (global-auto-complete-mode t)

    (icomplete-mode 0)
    (ido-ubiquitous 1)
  #+end_src

* Elixir

* Haskell
  #+begin_src emacs-lisp
    (add-hook 'haskell-mode-hook 'turn-on-haskell-indentation)
    (add-hook 'haskell-mode-hook 'haskell-flymake-init)
    (add-hook 'haskell-mode-hook 'flymake-hlint-load)
    (add-hook 'haskell-mode-hook 'ghci-completion-mode)
    (add-hook 'haskell-mode-hook 'flymake-haskell-multi-load)
    
    (add-hook 'inferior-haskell-mode-hook 'ghci-completion-mode)
  #+end_src

* JavaScript

** CoffeeScript
  #+begin_src emacs-lisp
    (setq coffee-tab-width 2)
  #+end_src
* Ruby

  #+begin_src emacs-lisp
    (require 'rvm)
    (require 'rsense)
    (require 'inf-ruby)
    (rvm-use-default)
    (add-hook 'ruby-mode-hook 'robe-mode)
    (add-hook 'ruby-mode-hook 'inf-ruby-setup-keybindings)
    (push 'ac-source-robe ac-sources)
    (add-hook 'ruby-mode-hook
              (lambda () (rvm-activate-corresponding-ruby)))
    (autoload 'inf-ruby-setup-keybindings "inf-ruby" "" t)
    (autoload 'inf-ruby "inf-ruby" "Run an inferior Ruby process" t)
    (eval-after-load 'ruby-mode
      '(add-hook 'ruby-mode-hook 'inf-ruby-setup-keybindings))
    
    ;; Stupid Fixes
    (setq last-command-char last-command-event)
    ;;(setq inf-ruby-keys inf-ruby-setup-keybindings)
    
    (add-to-list 'load-path "~/.emacs.d/packages/mactag")
    (require 'mactag)
    (setq scss-compile-at-save nil)
  #+end_src



** Rails
  #+begin_src emacs-lisp
    (require 'mmm-auto)
    (require 'rinari)
    (rinari-launch)
    
    (add-to-list 'load-path "~/.emacs.d/rhtml")
    (require 'rhtml-mode)
    (add-hook 'rhtml-mode-hook
              (lambda () (rinari-launch)))
    (add-to-list 'auto-mode-alist '("\\.erb$" . rhtml-mode))
    (add-hook 'rinari-minor-mode-hook
              (lambda () (setq dash-at-point-docset "rails")))
  #+end_src

* Lisp

** Default Lisp
   Prelude uses Clozure as the default implementation, so I'll use that until it
   gives me problems.
  #+begin_src emacs-lisp
    (setq inferior-lisp-program "ccl")
  #+end_src

** Slime
  #+begin_src emacs-lisp
    (load (expand-file-name "~/quicklisp/slime-helper.el"))
    (slime-setup '(slime-fancy))
    (setq slime-use-autodoc-mode nil)
  #+end_src
** Paredit
  #+begin_src emacs-lisp

    (require 'paredit)
    (autoload 'paredit-mode "paredit"
      "Minor mode for pseudo-structurally editing Lisp code." t)
    (add-hook 'emacs-lisp-mode-hook       (lambda () (paredit-mode +1)))
    (add-hook 'lisp-mode-hook             (lambda () (paredit-mode +1)))
    (add-hook 'lisp-interaction-mode-hook (lambda () (paredit-mode +1)))
    (add-hook 'scheme-mode-hook           (lambda () (paredit-mode +1)))
    (add-hook 'clojure-mode-hook          (lambda () (paredit-mode +1)))
    (add-hook 'nrepl-mode-hook            (lambda () (paredit-mode +1)))
    (add-hook 'slime-mode-hook            (lambda () (paredit-mode +1)))
    (add-hook 'ielm-mode-hook             (lambda () (paredit-mode +1)))


    (provide 'lisp-config)

  #+end_src

** Scheme

* eShell
  #+begin_src emacs-lisp

    (setq eshell-cmpl-ignore-case t)
    (defadvice ansi-term (after advise-ansi-term-coding-system)
      (set-buffer-process-coding-system 'utf-8-unix 'utf-8-unix))
    (ad-activate 'ansi-term)

  #+end_src

* Projectile

  #+begin_src emacs-lisp
     (projectile-global-mode t)
  #+end_src

* eVIl

  #+begin_src emacs-lisp
    (add-to-list 'load-path
                 "~/elisp/evil/evil")
    (add-to-list 'load-path
                 "~/elisp/evil/evil-leader")
    (add-to-list 'load-path
                 "~/elisp/evil/evil-numbers")
    (add-to-list 'load-path
                 "~/elisp/evil/evil-rails")
    (add-to-list 'load-path
                 "~/elisp/evil/evil-surround")
    (require 'evil)
    (require 'evil-leader)

  #+end_src

** Evil Leader Bindings
  #+begin_src emacs-lisp
    (evil-leader/set-leader ",")
    (evil-leader/set-key
      "f" 'projectile-find-file
      "b" 'ido-switch-buffer
      "d" 'dired
      "g" 'find-file
      "x" 'smex
      )

  #+end_src

* Key Bindings

    #+begin_src emacs-lisp
      (global-set-key (kbd "C-c s s") 'eshell)
      (global-set-key (kbd "C-c f") 'ffip)
      (global-set-key (kbd "C-x C-b") 'ibuffer)
      (global-set-key (kbd "C-*") 'evil-search-symbol-forward)
      (windmove-default-keybindings)
    #+end_src

* Key Chords

  #+begin_src emacs-lisp
    (require 'key-chord)
    
    ;;(iswitchb-mode 1)
    ;;(key-chord-define-global "BB" 'iswitchb-buffer)
    
    (key-chord-define-global "FF" 'find-file)
    (key-chord-define-global "qf" 'projectile-find-file)
    (key-chord-define-global "qb" 'ido-switch-buffer)
    (key-chord-define-global "qh" 'helm-mini)
    
    (key-chord-define-global "jk" 'beginning-of-buffer)
    
    (key-chord-mode +1)
  #+end_src
